package cyoa

import (
	"encoding/json"
	"fmt"
	"html/template"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
)

func init(){
	readHttpFile(htmlPath)
	defaultTmpl = template.Must(template.New("").Parse(defaultTmplStr))
	defaultHomePath = "/intro" 
	
}

var defaultTmpl *template.Template
var defaultTmplStr = ""
//var defaultRequest *http.Request
var htmlPath = "/Users/kirstenliu/go/src/gophercises/cyoa/cmd/cyoaweb/intro.html"
var defaultHomePath string

func readHttpFile(path string){
	//fmt.Println("reading html...")
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		panic(err)
	}
	defaultTmplStr = string(buf)
	fmt.Println("After reading html...")
	fmt.Println(defaultTmplStr)
}

type HandlerOption func(*handler)

func OptStory(story Stories) HandlerOption{
	return func(h *handler) {
		h.s = story
	}
}

func OptTmpl(tmpl *template.Template) HandlerOption{
	return func(h *handler){
		h.t = tmpl
	}
}

func OptPath(path string) HandlerOption{
	return func(h *handler){
		//r.URL.Path = path
		h.p = path
	}
}

func OptFcPath(fn func(r *http.Request) string ) HandlerOption{
	return func(h *handler) {
		h.fn = fn
	}
}

func DefaultFcPath(r *http.Request) string{
	going := strings.TrimSpace(r.URL.Path)

	if r.URL.Path == "/" || r.URL.Path == ""{
		going = "intro"
	}

	going = going[1:]

	return going
}


//s Stories, t *template.Template
func NewHandler(s Stories, opts ...HandlerOption) http.Handler {
	h := handler{s, defaultTmpl, defaultHomePath, DefaultFcPath}
	for _, opt := range(opts){
		opt(&h)
	}
	return h
}

type handler struct{
	s Stories
	t *template.Template
	p string
	fn func(r *http.Request) string
}

func (h handler) ServeHTTP(w http.ResponseWriter, r *http.Request){
	//prefix := "story/"
	//going := DefaultFcPath(r)
	going := h.fn(r)

	if chapter, ok := h.s[going]; ok {
		err := h.t.Execute(w, chapter)
		if err != nil{
			log.Printf("%v", err)
			http.Error(w, "Can't parse template: ", http.StatusNotFound)
		}
	}else{
		log.Println("Can't find this chapter: ", going)
	}
}



type Stories map[string]Chapter

//select struct, cmd+shift+P: add tags
//omitempty will omit empty fields when unmarshell, instead of putting undefined nil or 0 value into empty fields
type Option struct {
	Text string `json:"text,omitempty"`
	Arc  string `json:"arc,omitempty"`
}

type Chapter struct {
	Title string 
	Story []string
	Options []Option
}

func Test(){
	fmt.Println("WHYYYYY")
}

func ReadJson(filename string) Stories{
	f, err := os.Open(filename)
	if err != nil{
		PrintErr := fmt.Errorf("error reading input json story: %v", err)
		fmt.Println(PrintErr.Error())
	}

	defer f.Close()
	//byteValue, _ := ioutil.ReadAll(f)

	var stories Stories

	//json.Unmarshal(byteValue, &story)
	d := json.NewDecoder(f)
	d.Decode(&stories)
	
	//fmt.Println(story)
	return stories
}

/*type AutoGenerated struct {
	Intro struct {
		Title   string   `json:"title"`
		Story   []string `json:"story"`
		Options []struct {
			Text string `json:"text"`
			Arc  string `json:"arc"`
		} `json:"options"`
	} `json:"intro"`
	NewYork struct {
		Title   string   `json:"title"`
		Story   []string `json:"story"`
		Options []struct {
			Text string `json:"text"`
			Arc  string `json:"arc"`
		} `json:"options"`
	} `json:"new-york"`
	Debate struct {
		Title   string   `json:"title"`
		Story   []string `json:"story"`
		Options []struct {
			Text string `json:"text"`
			Arc  string `json:"arc"`
		} `json:"options"`
	} `json:"debate"`
	SeanKelly struct {
		Title   string   `json:"title"`
		Story   []string `json:"story"`
		Options []struct {
			Text string `json:"text"`
			Arc  string `json:"arc"`
		} `json:"options"`
	} `json:"sean-kelly"`
	MarkBates struct {
		Title   string   `json:"title"`
		Story   []string `json:"story"`
		Options []struct {
			Text string `json:"text"`
			Arc  string `json:"arc"`
		} `json:"options"`
	} `json:"mark-bates"`
	Denver struct {
		Title   string   `json:"title"`
		Story   []string `json:"story"`
		Options []struct {
			Text string `json:"text"`
			Arc  string `json:"arc"`
		} `json:"options"`
	} `json:"denver"`
	Home struct {
		Title   string        `json:"title"`
		Story   []string      `json:"story"`
		Options []interface{} `json:"options"`
	} `json:"home"`
}*/